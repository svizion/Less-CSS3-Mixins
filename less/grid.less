/*
*
* Create a CSS3 media-query flexible grid for use with LESS.
* Created by Seth Meranda, http://twitter.com/smeranda
*
* Just specify the number of columns to use in the grid, the rest will be calculated for you!
*
*/

@numberOfColumns: 10;

/* LESS function to combine column and gutter widths for determining individual column widths */
.theWidth (@theColumn: 1, @columnWidth: 8%, @gutterWidth: 2.22222222%) {
    width: (@columnWidth * @theColumn) + (@gutterWidth * (@theColumn - 1));
}

* {
    margin: 0;
    padding: 0;
}

/* Start by declaring fluid widths for browsers that don't support media queries. Someday, someday.  */
.container {
    width: 100%;
    margin: 0 auto;
    overflow: hidden;
    background: #f1f1f1;
}

.grid1, .grid2, .grid3, .grid4, .grid5, .grid6, .grid7, .grid8, .grid9, .grid10 {
    margin-left: 2.22222222%;
    float: left;
    min-height: 1px;
}
.grid1 { .theWidth(1); }
.grid2 { .theWidth(2); }
.grid3 { .theWidth(3); }
.grid4 { .theWidth(4); }
.grid5 { .theWidth(5); }
.grid6 { .theWidth(6); }
.grid7 { .theWidth(7); }
.grid8 { .theWidth(8); }
.grid9 { .theWidth(9); }
.grid10 { .theWidth(10); }

/* Content areas */
img, video, audio, object { max-width:100%; }

/* Media Queries for various screens */

@media only screen and (min-width: 1140px) { 
/* At 1140px and larger, we use a fixed column width */
    
    @width: 1140px;

    .container {
        width: @width;
        background: #000;
    }
    
    @columnWidth: (@width * 0.8)/@numberOfColumns;
    @gutterWidth: (@width * 0.2)/(@numberOfColumns - 1);
    
    .gridCalculator (@columns) {
    /* Instead of forcing each of the following to pass these parameters to .theWidth, collect and pass-through once. */
        .theWidth(@columns, @columnWidth, @gutterWidth);
    }
    
    .grid1 { .gridCalculator(1); }
    .grid2 { .gridCalculator(2); }
    .grid3 { .gridCalculator(3); }
    .grid4 { .gridCalculator(4); }
    .grid5 { .gridCalculator(5); }
    .grid6 { .gridCalculator(6); }
    .grid7 { .gridCalculator(7); }
    .grid8 { .gridCalculator(8); }
    .grid9 { .gridCalculator(9); }
    .grid10 { .gridCalculator(10); }
    
    .grid1, .grid2, .grid3, .grid4, .grid5, .grid6, .grid7, .grid8, .grid9, .grid10 {
        margin-left: @gutterWidth;
    }
    
    .first {
        clear: left;
        margin-left: 0;
    }
}
@media only screen and (min-width: 980px) and (max-width: 1139px) { 
/* We also use a fixed column width for 980px - 1139px, just a bit smaller */

    @width: 960px;
    
    .container {
        width: @width;
        background: #b70302;
    }
    
    @columnWidth: (@width * 0.8)/@numberOfColumns;
    @gutterWidth: (@width * 0.2)/(@numberOfColumns - 1);
    
    .gridCalculator (@columns) {
    /* Instead of forcing each of the following to pass these parameters to .theWidth, collect and pass-through once. */
        .theWidth(@columns, @columnWidth, @gutterWidth);
    }
    
    .grid1 { .gridCalculator(1); }
    .grid2 { .gridCalculator(2); }
    .grid3 { .gridCalculator(3); }
    .grid4 { .gridCalculator(4); }
    .grid5 { .gridCalculator(5); }
    .grid6 { .gridCalculator(6); }
    .grid7 { .gridCalculator(7); }
    .grid8 { .gridCalculator(8); }
    .grid9 { .gridCalculator(9); }
    .grid10 { .gridCalculator(10); }
    
    .grid1, .grid2, .grid3, .grid4, .grid5, .grid6, .grid7, .grid8, .grid9, .grid10 {
        margin-left: @gutterWidth;
    }
    
    .first {
        clear: left;
        margin-left: 0;
    }
}
@media only screen and (min-width:769px) and (max-width: 979px) {
/* Now, we get into flexible column widths */
    .container {
        .theWidth(10);
        background: blue;
    }
    
    .first {
        clear: left;
        margin-left: 0;
    }
    
    *[class^="grid"] > *[class^="grid"] {
        width: 31%; /*Nested fluid columns don't always round correctly, so we go a bit smaller here.*/
        margin-left: 3.5%;
        clear: none;
    }
    *[class^="grid"] > *[class^="grid"]:nth-child(3n+1) {
        margin-left: 0;
        clear: left;
    }
}
@media only screen and (min-width:641px) and (max-width: 768px) {
    .container {background:yellow;}
    .grid1, .grid2, .grid3, .grid4, .grid5, .grid6, .grid7, .grid8, .grid9, .grid10 {
        width: 31%;
        margin-left: 3.5%;
        clear: none;
    }
    .container > *[class^="grid"]:nth-child(3n+1) {
        margin-left: 0;
        clear: left;
    }
    
    *[class^="grid"] > *[class^="grid"] {
        width: 48%;
        margin-left: 4%;
        clear: none;
    }
    *[class^="grid"] > *[class^="grid"]:nth-child(odd) {
        margin-left: 0;
        clear: left;
    }
}

@media only screen and (max-width: 640px) {
    .grid1, .grid2, .grid3, .grid4, .grid5, .grid6, .grid7, .grid8, .grid9, .grid10 {
        width: 48%;
        margin-left: 4%;
        clear: none;
    }
    .container > *[class^="grid"]:nth-child(odd) {
        margin-left: 0;
        clear: left;
    }
    *[class^="grid"] > *[class^="grid"] {
        width: 100%;
        margin-left: 0;
    }
}
@media only screen and (max-width: 340px) {
/* Collapse all our columns */
    .grid1, .grid2, .grid3, .grid4, .grid5, .grid6, .grid7, .grid8, .grid9, .grid10 {
        width: 100%;
        margin-left: 0;
    }
}
@media only screen and (-webkit-min-device-pixel-ratio : 1.5), screen and (min-device-pixel-ratio : 1.5) {
/* For devices with higher resolutions */

}